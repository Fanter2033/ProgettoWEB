swagger: "2.0"
info:
  description: "API per Squealer, il social che ha ucciso Twitter! (Anche se si Ã¨ ucciso da solo)"
  version: "1.0.0"
  title: "Squealer API"
#host: "site222317.tw.cs.unibo.it"
host: "localhost:8000"
basePath: "/"
schemes:
  - "http"
  - "https"
paths:
  /auth/{username}/{auth_field}:
    post:
      tags:
        - auth
      summary: Authenticate the user
      description: Authenticate the user with his password and start new session for them.
      parameters:
        - name: username
          in: path
          description: Authentication user
          type: string
          required: true
        - name: auth_field
          in: path
          type: integer
          required: true
          description: Required role authenticating
        - name: password
          in: formData
          type: string
          required: true
          description: User password
      responses:
        '204':
          description: Returns no content, the client knows what do. In this case the session is created.
        '500':
          description: Failed authentication due server error
        '403':
          description: Failed authentication due wrong password or username.
  /auth/logout:
    post:
      tags:
        - auth
      summary: De-Authenticate user
      description: De-Authenticate the requesting user, if one is logged, the user is got by the server using session id!
      responses:
        '204':
          description: Returns no content, the client knows what do.
        '500':
          description: Failed authentication due server error
        '404':
          description: No user to de-authenticate found.
  /auth/whoami/:
    get:
      tags:
        - auth
      summary: Returns the object of the authenticated user
      responses:
        '200':
          description: Returns what told in the summary.
        '403':
          description: Not authenticated
  /utils/dashboard/:
    get:
      tags:
        - utils
      summary: Get public posts of the user.
      description: Are returned all posts that have as receivers a channel where the user is subscribed
      parameters:
        - name: excludeFrom
          required: false
          type: number
          in: query
        - name: excludeTo
          required: false
          type: number
          in: query
      responses:
        '200':
          description: returns an array of Squeals
          schema:
            type: array
            maxLength: 10
            $ref: '#/definitions/Squeal'
  /utils/chat/:
    get:
      tags:
        - utils
      summary: Get private posts of the user.
      description: Are returned all posts that have as receivers the user
      parameters:
        - name: excludeFrom
          required: false
          type: number
          in: query
        - name: excludeTo
          required: false
          type: number
          in: query
      responses:
        '200':
          description: returns an array of Squeals
          schema:
            type: array
            maxLength: 10
            $ref: '#/definitions/Squeal'
  /utils/squeals/{username}:
    get:
      tags:
        - utils
      summary: Returns all the public squeals of a user.
      responses:
        '200':
          description: returns an array of Squeals
          schema:
            type: array
            maxLength: 10
            $ref: '#/definitions/Squeal'
  /utils/squeals/{channel_type}/{name}:
    get:
      tags:
        - utils
      summary: Returns all the squeals of a channel.
      description: Returns all the squeals of a channel, if the channel is public. Or if the user has authorization to see content
      responses:
        '200':
          description: returns an array of Squeals
          schema:
            type: array
            maxLength: 10
            $ref: '#/definitions/Squeal'
  /user/{username}:
    put:
      tags:
        - user
      summary: Update the user
      description: This method can be user only from the logged user or the Squealer admin.
      parameters:
        - name: username
          in: path
          description: Update server status
          required: true
          type: string
        - name: body
          in: body
          description: new User object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: 'Updated user'
        '400':
          description: 'Invalid username'
        '403':
          description: 'The requester is not the deleting user or a Squealer admin (or the requester is not logged)'
        '422':
          description: 'The user passed in request is not existent or it has not required fields (or invalid type of fields)'
          schema:
            type: string
            description: 'More information about the error'
    delete:
      tags:
        - user
      summary: Delete the specified user
      description: Delete the specified user only if the request is made by the deleting user of if is done from a Squealer admin
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Deleted user'
        '400':
          description: 'Invalid username'
        '403':
          description: 'The requester is not the deleting user or a Squealer admin (or the requester is not logged)'
        '404':
          description: 'Deleting user not found.'
    get:
      tags:
        - user
      summary: Get the information about the user
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
        '400':
          description: 'User not specified or other error'
        '404':
          description: 'User not found'
  /user:
    post:
      tags:
        - user
      summary: Create the user
      description: Create the user in the request body
      parameters:
        - name: user
          in: body
          description: new User object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: 'Created user'
        '400':
          description: 'Invalid username'
        '422':
          description: 'The user passed in request has not required fields (or invalid type of fields)'
          schema:
            type: string
            description: 'More information about the error'
    get:
      tags:
        - user
      summary: Get a list of users
      description: Returns an array of User. If the user is not authenticated or is not an admin only some fields are populated
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: search
          in: query
          required: false
          type: string
        - name: orderBy
          in: query
          required: false
          description: The order by value should be a key of User.
          type: string
        - name: orderDir
          in: query
          required: false
          type: string
          enum:
            - ORDER_ASC
            - ORDER_DESC
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/User'
              totalCount:
                type: integer
  /user/filter/{type}:
    get:
      tags:
        - user
      summary: Get a list of users
      description: Returns an array of User. If the user is not authenticated or is not an admin only some fields are populated
      parameters:
        - name: type
          in: path
          required: true
          type: string
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: search
          in: query
          required: false
          type: string
        - name: orderBy
          in: query
          required: false
          description: The order by value should be a key of User.
          type: string
        - name: orderDir
          in: query
          required: false
          type: string
          enum:
            - ORDER_ASC
            - ORDER_DESC
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/User'
              totalCount:
                type: integer
  /user/{username}/toggle/vip:
    patch:
      tags:
        - vip
      summary: Toggle vip
      description: Given an username, enable or disable his/her vip status
      parameters: 
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
  /user/{username}/toggle/smm:
    patch:
      tags:
        - vip
      summary: Toggle smm
      description: Given a vip, enable or disable the smm status
      parameters: 
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
  /user/{username}/pick-smm/{smm}:
    patch:
      tags:
        - vip
      summary: Choose smm for vip
      description:  Choose smm for vip
      parameters: 
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
  /user/{username}/remove-smm:
    patch:
      tags:
        - vip
      summary: Remove smm
      description: Remove smm
      parameters: 
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
  /user/{username}/my-smm:
    get:
      tags:
        - vip
      summary: Returns smm of vip
      description: Returns smm of vip
      parameters: 
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
  /user/{username}/my-users/:
    get:
      tags:
        - vip
      summary: Returns vip(s) of smm
      description: Returns vip(s) of smm
      parameters: 
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'       
  /user/{username}/toggle/locked:
    patch:
      tags:
        - user
      summary: Toggle the lock of a user.
      description: Toggle the lock of a user. If the user is locked unlock them, if is user lock them.
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /user/{username}/stats/squealPopularity:
    get:
      tags:
        - user
      summary: Get the squeal stats
      description: Returns only the squeal published between 2 timestamps.
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: fromTimestamp
          in: formData
          required: true
          type: number
        - name: toTimestamp
          in: formData
          required: true
          type: number
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /user/{username}/roles/:
    get:
      tags:
        - user
      summary: Get the user roles
      description: Returns all user roles.
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Bad Request.'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /user/{username}/resetPassword/:
    put:
      tags:
        - user
      summary: Reset password with reset password string if exists, is not null and not void
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: reset
          in: formData
          required: true
          type: string
        - name: password
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Bad Request.'
        '403':
          description: 'Reset str error.'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /channel:
    post:
      tags:
        - channel
      summary: Create the channel
      description: Create the channel in the request body
      parameters:
        - name: channel
          in: body
          description: new Channel object. The creation of Official channels is allowed only for admins, the creation of channel tags is forbidden because its exists for every keyword.
          required: true
          schema:
            $ref: '#/definitions/Channel'
      responses:
        '201':
          description: 'Created channel'
        '400':
          description: 'Invalid channel name, object or invalid type'
          schema:
            type: string
            description: 'More info about the error'
        '401':
          description: 'User authenticated but tried to create an official channel.'
        '403':
          description: 'Unable to create channel due low privileges'
          schema:
            type: string
            description: 'More information about the error'
        '409':
          description: 'Channel already exists. Cannot create'
    get:
      tags:
        - channel
      summary: Get a list of channels
      description: Returns an array of Channels.
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: search
          in: query
          required: false
          type: string
        - name: orderBy
          in: query
          required: false
          description: The order by value should be a key of Channel.
          type: string
        - name: orderDir
          in: query
          required: false
          type: string
          enum:
            - ORDER_ASC
            - ORDER_DESC
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            properties:
              channels:
                type: array
                items:
                  $ref: '#/definitions/Channel'
              totalCount:
                type: integer
  /channel/{type}/:
    get:
      tags:
        - channel
      summary: Get a list of channels
      description: Returns an array of Channels.
      parameters:
        - name: type
          in: path
          required: true
          type: string
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: search
          in: query
          required: false
          type: string
        - name: orderBy
          in: query
          required: false
          description: The order by value should be a key of Channel.
          type: string
        - name: orderDir
          in: query
          required: false
          type: string
          enum:
            - ORDER_ASC
            - ORDER_DESC
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            properties:
              channels:
                type: array
                items:
                  $ref: '#/definitions/Channel'
              totalCount:
                type: integer
  /channel/{type}/{name}:
    put:
      tags:
        - channel
      summary: Update the channel
      description: Update the channel with his name in path with the passed Channel object in the body. If the password is not passed the system handle old password. Registration timestamp do not be changed. Cannot update TAG channels
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
        - name: channel
          in: body
          description: new Channel object
          required: true
          schema:
            $ref: '#/definitions/Channel'
      responses:
        '200':
          description: 'Updated channel'
        '400':
          description: 'Invalid channel name or object'
          schema:
            type: string
            description: 'More info about the error'
        '403':
          description: 'Unable to update channel due low privileges or tried to update tag channel'
          schema:
            type: string
            description: 'More information about the error'
        '404':
          description: 'The specified channel in URL path is not found'
    delete:
      tags:
        - channel
      summary: Delete the channel
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Deleted channel'
        '403':
          description: 'Unable to delete channel due low privileges or tired to delete tag channel. For Public channels only administrators can execute delete. For user channels only admins can execute delete'
          schema:
            type: string
            description: 'More information about the error'
        '404':
          description: 'The specified channel in URL path is not found'
    get:
      tags:
        - channel
      summary: Get channel information
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
      responses:
        '200':
          description: 'Channel info'
          schema:
            $ref: '#/definitions/Channel'
        '400':
          description: 'Bad Request.'
        '403':
          description: 'Unable to read channel due low privileges'
          schema:
            type: string
            description: 'More information about the error'
        '404':
          description: 'The specified channel in URL path is not found'
    patch:
      tags:
        - channel
      summary: Follow channel
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
      responses:
        '200':
          schema:
            type: number
          description: 'Returns the role assoc'
        '208':
          description: 'Already following'
        '400':
          description: 'Bad Request.'
        '403':
          description: 'Not logged'
        '404':
          description: 'The specified channel in URL path is not found'
  /channel/{type}/{name}/users/{username}/:
    delete:
      tags:
        - channel
      summary: Delete the user role.
      description: Delete the user role from the channel, used to handle unfollow.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
        - name: username
          type: string
          required: true
          in: path
      responses:
        '200':
          description: 'Deleted channel'
        '403':
          description: 'Unable to delete channel due low privileges or tired to delete tag channel. For Public channels only administrators can execute delete. For user channels only admins can execute delete'
          schema:
            type: string
            description: 'More information about the error'
        '404':
          description: 'The specified channel in URL path is not found'
    get:
      tags:
        - channel
      summary: Get the role of the user in the channel.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
        - name: username
          type: string
          required: true
          in: path
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '500':
          description: 'Internal server error'
  /channel/{type}/{name}/{username}/:
    patch:
      tags:
        - channel
      summary: Change the role of the user.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
        - name: username
          in: path
          type: string
          required: true
        - name: new_role
          in: formData
          type: number
          required: true
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /channel/{type}/{name}/toggle/lock:
    patch:
      tags:
        - channel
      summary: Toggle the lock of a channel.
      description: Toggle the lock of a channel. If the channel is locked unlock it, if is unlocked lock it.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '404':
          description: 'Channel not found'
        '500':
          description: 'Internal server error'
  /channel/{type}/{name}/users/:
    get:
      tags:
        - channel
      summary: Get the users following a channel.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
      responses:
        '200':
          description: 'Everything is ok'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '500':
          description: 'Internal server error'
  /channel/{type}/{name}/roles/{role}:
    get:
      tags:
        - channel
      summary: Get the users following a channel.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: type
          in: path
          required: true
          type: string
          enum:
            - CHANNEL_OFFICIAL
            - CHANNEL_USERS
            - CHANNEL_HASHTAG
        - name: role
          in: path
          required: true
          type: number
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '500':
          description: 'Internal server error'
  /channel/CHANNEL_OFFICIAL/{name}/description/:
    put:
      tags:
        - channel
      summary: Update channel official description
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: description
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: 'Everything is ok'
        '400':
          description: 'Bad Request.'
        '401':
          description: 'User logged but not authorized to execute the operation'
        '403':
          description: 'User not logged'
        '500':
          description: 'Internal server error'
  /squeal/:
    post:
      tags:
        - squeal
      summary: Create a new squeal
      parameters:
        - name: squeal
          description: Squeal object to add
          required: true
          in: body
          schema:
            $ref: '#/definitions/Squeal'
        - name: fromAdmin
          description: Is squeal from admin places?
          required: false
          type: boolean
          in: query
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            items:
              $ref: '#/definitions/Squeal'
            description: 'Added Squeal'
        '400':
          description: 'Bad request, missing body or missing request field'
        '401':
          description: 'Quota exceed'
        '403':
          description: 'User not logged'
    get:
      tags:
        - squeal
      summary: Get a list of channels
      description: Returns an array of Channels.
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: search_sender
          in: query
          required: false
          type: string
        - name: search_dest
          in: query
          required: false
          type: string
        - name: orderBy
          in: query
          required: false
          description: The order by value should be a key of Channel.
          type: string
        - name: orderDir
          in: query
          required: false
          type: string
          enum:
            - ORDER_ASC
            - ORDER_DESC
      responses:
        '200':
          description: 'Successful operation'
  /squeal/{identifier_id}:
    get:
      tags:
        - squeal
      summary: Get squeal
      parameters:
        - name: identifier_id
          description: Squeal ID
          required: true
          in: path
          type: string
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            $ref: '#/definitions/Squeal'
        '400':
          description: 'Generic error'
        '401':
          description: 'Not authorized'
        '403':
          description: 'Not authenticated'
        '404':
          description: 'Identifier not found'
    put:
      tags:
        - squeal
      summary: Update the POSITION_AUTO squeal
      parameters:
        - name: identifier_id
          in: path
          required: true
          type: integer
        - name: new_position
          in: formData
          description: New coords
          type: array
          required: true
      responses:
        '200':
          description: 'Updated'
        '400':
          description: 'Bad request'
          schema:
            type: string
            description: 'More info about the error'
        '401':
          description: 'Unable to update squeal due low quota'
          schema:
            type: string
            description: 'More information about the error'
        '403':
          description: 'Unable to update squeal due low privileges'
          schema:
            type: string
            description: 'More information about the error'
        '404':
          description: 'The specified squeal in URL path is not found'
  /squeal/{identifier_id}/reaction/{reaction}:
    patch:
      tags:
        - squeal
      summary: Set squeal reaction
      parameters:
        - name: identifier_id
          description: Squeal ID
          required: true
          in: path
          type: string
        - name: reaction
          description: Reaction
          required: true
          in: path
          type: string
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Generic error'
        '401':
          description: 'Not authorized'
        '404':
          description: 'Identifier not found'
  /squeal/{identifier_id}/destinations/:
    put:
      tags:
        - squeal / admin-only
      parameters:
        - name: identifier_id
          description: Squeal ID
          required: true
          in: path
          type: string
        - name: destinations
          description: new Squeal destinations
          required: true
          in: formData
          type: array
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Generic error'
        '401':
          description: 'Not authorized'
        '404':
          description: 'Identifier not found'
  /squeal/{identifier_id}/reactions/:
    put:
      tags:
        - squeal / admin-only
      parameters:
        - name: identifier_id
          description: Squeal ID
          required: true
          in: path
          type: string
        - name: positive_value
          required: true
          in: formData
          type: number
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Generic error'
        '401':
          description: 'Not authorized'
        '404':
          description: 'Identifier not found'
  /squeal/{identifier_id}/comment/:
    get:
      tags:
        - comment
      summary: Returns comment of a post
      parameters:
        - name: identifier_id
          description: Squeal ID
          required: true
          in: path
          type: string
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Generic error'
        '401':
          description: 'Not authorized'
        '404':
          description: 'Identifier not found'
    post:
      tags:
        - comment
      summary: Create a squeal
      parameters:
        - name: identifier_id
          description: Squeal ID
          required: true
          in: path
          type: string
        - name: comment
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Generic error'
        '401':
          description: 'Not authorized'
        '404':
          description: 'Identifier not found'
  /user/{username}/quote:
    get:
      tags:
        - quote
      summary: See the user quota
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
          schema:
            type: object
            $ref: '#/definitions/Quote'
        '404':
          description: 'User not found'
    patch:
      tags:
        - quote
      summary: Change user quota by percentage
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: percentage
          in: formData
          type: integer
          minimum: 0
          maximum: 10000
      responses:
        '200':
          description: 'Successful operation'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Requesting user is not an admin'
        '404':
          description: 'User not found'
  /user/{username}/quote/buy:
    patch:
      tags:
        - quote
      summary: Change user quota by percentage
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: percentage
          in: formData
          type: integer
          minimum: 0
          maximum: 10000
      responses:
        '200':
          description: 'Successful operation'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Requesting user is not an admin'
        '404':
          description: 'User not found'
  /user/{username}/quote/refill:
    put:
      tags:
        - quote
      summary: Reset the quota usage
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'Successful operation'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Requesting user is not an admin or a user SMM'
        '404':
          description: 'User not found'
definitions:
  User:
    type: object
    properties:
      username:
        type: string
        maxLength: 32
        description: Anche l'username deve essere univoco
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
        description: Email dell'utente, ogni utente ha la propria
      psw_shadow:
        type: string
      registration_timestamp:
        type: integer
      isUser:
        type: boolean
      isSmm:
        type: boolean
      isMod:
        type: boolean
  Channel:
    type: object
    properties:
      name:
        type: string
        maxLength: 128
        description: Channel name
      type:
        type: string
        enum:
          - CHANNEL_OFFICIAL
          - CHANNEL_USERS
          - CHANNEL_HASHTAG
        description: type of channel
      private:
        type: boolean
        default: false
        description: This attribute can be true only for private channels, not allowed on TAG and PUBLIC channels
  Destination:
    type: object
    properties:
      dest_type:
        type: string
        enum:
          - CHANNEL
          - CHANNEL_TAG
          - USER
        description: dest type
      identifier:
        type: string
        description: destination name
  Reaction:
    type: object
    properties:
      importance:
        type: integer
        enum:
          - LIKE_A_LOT
          - LIKE
          - MEH
          - DO_NOT_LIKE
          - DISGUSTED
        description: enum of possible reactions
      squeal_identifier:
        type: string
        description: squeal id
  Squeal:
    type: object
    description: Squealer post/message
    properties:
      identifier:
        type: integer
      date:
        type: object
      destinations:
        type: array
        items:
          $ref: '#/definitions/Destination'
        minItems: 1
      sender:
        type: string
        description: username of the squealer's sender
      message_type:
        type: string
        enum:
          - MESSAGE_TEXT
          - IMAGE
          - VIDEO_URL
          - POSITION
          - TEXT_AUTO
          - POSITION_AUTO
      message_value:
        type: string
        description: Message value, how this field is used depends on message_type value.
      critical_mass:
        type: integer
        description: used to identify a squeal as; popular, unpopular or controversial
      positive_value:
        type: number
        description: R+, positive reaction increment this number
      negative_value:
        type: number
        description: R-, negative reaction decrement this number
      reactions:
        type: array
        items:
          $ref: '#/definitions/Reaction'
  Quote:
    type: object
    description: User quote
    properties:
      id:
        type: string
        description: reference user
      limit_daily:
        type: integer
      limit_weekly:
        type: integer
      limit_monthly:
        type: integer
      remaining_daily:
        type: integer
      remaining_weekly:
        type: integer
      remaining_monthly:
        type: integer
  Vip:
    type: object
    properties:
      user: 
        type: string
        description: username of the vip
      linked_smm:
        type: string
        description: smm of the vip (if the vip in not smm)
      linked_users:
        type: array
        description: if the vip is smm, this are his fellas
